/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.gperez.ti.gcm;

import android.app.Notification;
import android.app.NotificationManager;
import android.content.Context;
import android.os.AsyncTask;
import com.google.android.gms.gcm.GoogleCloudMessaging;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import java.io.IOException;

@Kroll.module(name="TiGcm", id="com.gperez.ti.gcm")
public class TiGcmModule extends KrollModule
{
    private GoogleCloudMessaging gcm;

    // Standard Debugging variables
    private static final String LCAT = "TiGcmModule";
    private static final boolean DBG = TiConfig.LOGD;

    public static final String PROPERTY_SENDER_ID = "GCM_sender_id";

    private static final String PROPERTY_ON_SUCCESS = "success";
    private static final String PROPERTY_ON_ERROR = "error";
    private static final String PROPERTY_ON_DATA = "callback";

    private static final String EVENT_PROPERTY_DEVICE_TOKEN = "deviceToken";
    private static final String EVENT_PROPERTY_ERROR = "error";
    private static final String EVENT_PROPERTY_DATA = "data";
    private static final String EVENT_PROPERTY_IN_BACKGROUND = "inBackground";

    private static KrollFunction onSuccessCallback;
    private static KrollFunction onErrorCallback;
    private static KrollFunction onDataCallback;

    private static KrollDict pendingData = null;

    public TiGcmModule()
    {
        super();

        // Titanium should only ever create one instance.
        instance = this;
    }

    private static TiGcmModule instance = null;

    public static TiGcmModule getInstance() {
        return instance;
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        // put module init code that needs to run when the application is created
    }

    public static void logd(String message) {
        if (DBG) {
            Log.d(LCAT, message);
        }
    }

    @Kroll.method
    public void registerForPushNotifications(KrollDict args) {

        Object successCallbackArg = args.get(PROPERTY_ON_SUCCESS);
        Object errorCallbackArg = args.get(PROPERTY_ON_ERROR);
        Object dataCallbackArg = args.get(PROPERTY_ON_DATA);

        if (successCallbackArg instanceof KrollFunction) {
            onSuccessCallback = (KrollFunction) successCallbackArg;
        }
        if (errorCallbackArg instanceof KrollFunction) {
            onErrorCallback = (KrollFunction) errorCallbackArg;
        }
        if (dataCallbackArg instanceof KrollFunction) {
            onDataCallback = (KrollFunction) dataCallbackArg;

            // Fire an event that was queued before app was loaded.
            if (pendingData != null) {
                KrollDict data = pendingData;
                pendingData = null;
                fireData(data, true);
            }
        }

        new AsyncTask<Void, Void, String>() {
            @Override
            protected String doInBackground(Void... params) {
                String msg = "";
                try {
                    if (gcm == null) {
                        Context context = TiApplication.getInstance().getApplicationContext();
                        gcm = GoogleCloudMessaging.getInstance(context);
                    }
                    String registrationId = gcm.register(TiApplication.getInstance().getAppProperties().getString(TiGcmModule.PROPERTY_SENDER_ID, ""));
                    msg = "Device registered: registrationId = " + registrationId;
                    fireSuccess(registrationId);
                } catch (IOException e) {
                    msg = "Error: " + e.getMessage();
                    fireError("Failed to register");
                }
                return msg;
            }

            @Override
            protected void onPostExecute(String msg) {
                logd(msg);
            }
        }.execute(null, null, null);

    }

    @Kroll.method
    public GcmNotificationProxy createNotification(Object[] args) {

        GcmNotificationProxy notification = new GcmNotificationProxy();
        notification.handleCreationArgs(this, args);
        return notification;
    }

    @Kroll.method
    public void notify(int id, GcmNotificationProxy notificationProxy) {

        Context context = TiApplication.getInstance().getApplicationContext();
        NotificationManager nm = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);

        Notification notification = notificationProxy.getNotification();
        nm.notify(id, notification);
    }

    public void fireSuccess(String registrationId) {
        if (onSuccessCallback != null) {
            KrollDict event = new KrollDict();
            event.put(EVENT_PROPERTY_DEVICE_TOKEN, registrationId);
            onSuccessCallback.call(getKrollObject(), event);
        }
    }

    public void fireData(KrollDict data, Boolean inBackground) {
        if (onDataCallback != null) {
            KrollDict event = new KrollDict();
            event.put(EVENT_PROPERTY_DATA, data);
            event.put(EVENT_PROPERTY_IN_BACKGROUND, inBackground);
            onDataCallback.call(getKrollObject(), event);
        }
        else if (inBackground) {
            // If app wasn't loaded, there can't be a listener.  We'll need to wait to fire event.
            pendingData = data;
        }
    }

    public void fireError(String error) {
        if (onErrorCallback != null) {
            KrollDict event = new KrollDict();
            event.put(EVENT_PROPERTY_ERROR, error);
            onErrorCallback.call(getKrollObject(), event);
        }
    }
}

